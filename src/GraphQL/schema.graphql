"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
    """
    When true, the client will never use the cache for this value. See
    https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
    """
    always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
    """
    The variable name to export this field as.
    """
    as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
    """
    Specify the store key.
    """
    key: String!

    """
    An array of query argument names to include in the generated custom store key.
    """
    filter: [String!]
) on FIELD

"""
Add email to the newsletter list input
"""
input AddToNewsletterInput {
    email: String!
}

"""
Change message status data
"""
input ChangeContactStatusInput {
    id: ID!
    status: Int!
}

"""
Change enquiry status data
"""
input ChangeEnquiryStatusInput {
    id: ID!
    status: Int!
}

"""
Object representing a contact message
"""
type ContactType {
    id: ID!
    clientName: String!
    email: String!
    message: String!
    status: Int!
    createdAt: DateTime!
    updatedAt: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""
Object representing a enquiry
"""
type EnquiryType {
    id: ID!
    clientName: String!
    email: String!
    guests: Int!
    checkin: DateTime!
    checkout: DateTime!
    status: Int!
    createdAt: DateTime!
    updatedAt: DateTime!
    establishment: EstablishmentType!
}

"""
Object representing a establishment
"""
type EstablishmentType {
    id: ID!
    name: String!
    email: String!
    imageUrl: String!
    price: Float!
    maxGuests: Int!
    googleLat: Float!
    googleLong: Float!
    description: String!
    selfCatering: Boolean!
    createdAt: DateTime!
    updatedAt: DateTime!
    rating: [RateType!]
    enquiries: [EnquiryType!]
    wishlist: [WishlistType!]
}

"""
Object representing if a user is on the newsletter list
"""
type IsOnNewsletterListType {
    isOnNewsletterList: Boolean!
}

"""
Object representing a logout response
"""
type LogoutType {
    loggedOut: Boolean!
}

type Mutation {
    """
    Adds a new message
    """
    addMessage(data: NewContactInput!): ContactType!

    """
    Changes the status on a message
    """
    changeMessageStatus(data: ChangeContactStatusInput!): ContactType!

    """
    Adds a new enquiry
    """
    addEnquiry(data: NewEnquiryInput!): EnquiryType!

    """
    Updates a enquiry by ID
    """
    updateEnquiry(data: UpdateEnquiryInput!): EnquiryType!

    """
    Changes the status on a enquiry
    """
    changeEnquiryStatus(data: ChangeEnquiryStatusInput!): EnquiryType!

    """
    Deletes a enquiry by ID
    """
    deleteEnquiry(id: ID!): EnquiryType!

    """
    Adds a new user
    """
    addUser(data: NewUserInput!): UserType!

    """
    Login a user
    """
    login(username: String!, password: String!): UserWithTokenType!

    """
    Logout a user
    """
    logout: LogoutType!

    """
    Creates a token to reset a users password
    """
    forgotPassword(email: String!): UserType!

    """
    Completes a forgot password request
    """
    forgotPasswordVerify(newPassword: String!, token: String!): UserType!

    """
    Changes a users password
    """
    changePassword(id: ID!, password: String!): UserType!

    """
    Refreshes auth token
    """
    refreshAuthTokens: UserWithTokenType!

    """
    Rates an establishment
    """
    rateEstablishment(establishmentId: ID!, rating: Float!): EstablishmentType!

    """
    Toggles the wishlist status on an establishment
    """
    toggleEstablishmentWishlist(establishmentId: ID!): EstablishmentType!

    """
    Adds a new establishment
    """
    addEstablishment(data: NewEstablishmentInput!): EstablishmentType!

    """
    Updates a establishment by ID
    """
    updateEstablishment(data: UpdateEstablishmentInput!): EstablishmentType!

    """
    Deletes a establishment by ID
    """
    deleteEstablishment(id: ID!): EstablishmentType!

    """
    Adds a email to the newsletter list
    """
    AddToNewsletter(data: AddToNewsletterInput!): NewsletterType!

    """
    Removes a email from the newsletter list
    """
    RemoveFromNewsletter(data: RemoveFromNewsletterInput!): NewsletterType!
}

"""
New contact data
"""
input NewContactInput {
    clientName: String!
    email: String!
    message: String!
}

"""
New enquiry data
"""
input NewEnquiryInput {
    establishmentId: ID!
    clientName: String!
    email: String!
    guests: Int!
    checkin: DateTime!
    checkout: DateTime!
}

"""
New establishment data
"""
input NewEstablishmentInput {
    name: String!
    email: String!
    imageUrl: String!
    price: Float!
    maxGuests: Int!
    googleLat: Float!
    googleLong: Float!
    description: String!
    selfCatering: Boolean!
}

"""
Object representing a email signed up for newsletters
"""
type NewsletterType {
    id: ID!
    email: String!
    createdAt: DateTime!
    updatedAt: DateTime!
}

"""
New user data
"""
input NewUserInput {
    username: String!
    password: String!
    email: String!
    name: String!
    newsletters: Boolean!
}

type Query {
    """
    Returns a message by ID
    """
    getMessage(id: ID!): ContactType!

    """
    Returns all messages
    """
    getAllMessages: [ContactType!]!

    """
    Returns a enquiry by ID
    """
    getEnquiry(withEstablishment: Boolean = false, id: ID!): EnquiryType!

    """
    Returns all enquiries
    """
    getAllEnquiries(withEstablishment: Boolean = false): [EnquiryType!]!

    """
    Return all enquiries by a user
    """
    getAllEnquiriesByUser: [EnquiryType!]!

    """
    Returns current signed in user
    """
    getUser: UserType!

    """
    Returns all users
    """
    getAllUsers: [UserType!]!

    """
    Returns a establishment by ID
    """
    getEstablishment(withEnquiries: Boolean = false, id: ID!): EstablishmentType!

    """
    Returns all establishments
    """
    getAllEstablishments(withEnquiries: Boolean = false): [EstablishmentType!]!

    """
    Returns establishments maxing a search query
    """
    searchEstablishments(searchQuery: String!): [EstablishmentType!]!

    """
    Checks if a email is on the newsletter list
    """
    isOnNewsletterList(email: String!): IsOnNewsletterListType!
}

"""
Object representing a wishlist item
"""
type RateType {
    id: ID!
    rating: Float!
    userId: ID!
    establishmentId: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
}

"""
Remove email from the newsletter list input
"""
input RemoveFromNewsletterInput {
    email: String!
}

"""
Update enquiry data
"""
input UpdateEnquiryInput {
    id: ID!
    clientName: String
    guests: Int!
    checkin: DateTime
    checkout: DateTime
}

"""
New establishment data
"""
input UpdateEstablishmentInput {
    id: ID!
    name: String
    email: String
    imageUrl: String
    price: Float
    maxGuests: Int
    googleLat: Float
    googleLong: Float
    description: String
    selfCatering: Boolean
}

"""
Object representing a user
"""
type UserType {
    id: ID!
    username: String!
    email: String!
    name: String!
    accessLevel: Int!
    createdAt: DateTime!
    updatedAt: DateTime!
}

"""
Object representing a user with auth token
"""
type UserWithTokenType {
    authToken: String!
    user: UserType!
}

"""
Object representing a wishlist item
"""
type WishlistType {
    id: ID!
    userId: ID!
    establishmentId: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
}
